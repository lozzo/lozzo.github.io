<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>playwright远程调用和简单实现</title>
    <link href="/2021/03/29/python%E7%89%88%E6%9C%AC%E7%9A%84playwright%E5%9C%A8%E5%90%AF%E5%8A%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%97%B6%E5%80%99%E6%98%AF%E7%94%A8nodejs%E7%89%88%E6%9C%AC%E7%9A%84%E8%BF%9B%E8%A1%8C%E5%90%AF%E5%8A%A8%E7%9A%84/"/>
    <url>/2021/03/29/python%E7%89%88%E6%9C%AC%E7%9A%84playwright%E5%9C%A8%E5%90%AF%E5%8A%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%97%B6%E5%80%99%E6%98%AF%E7%94%A8nodejs%E7%89%88%E6%9C%AC%E7%9A%84%E8%BF%9B%E8%A1%8C%E5%90%AF%E5%8A%A8%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<p>巨硬出品的<a href="https://github.com/microsoft/playwright">playwright</a>是一个非常不错的自动化工具，能够用同一套API去控制<code>Chromium</code>, <code>Firefox</code> 和 <code>WebKit</code> ，看到这儿大家也许会想到可以用这玩意儿做爬虫，相比<code>puppeteer</code>或者<code>pyppeteer</code>，他们适配的浏览器更多，适配的语言更多。但是其官方不提供远程调用的方式。这儿是一个简单的远程调用<code>playwright</code>的梳理流程和简单的代码。以playwright-python版本作为示例，其他语言的<code>playwright</code>的做法是一样的。</p><h1 id="安装和启动方式"><a href="#安装和启动方式" class="headerlink" title="安装和启动方式"></a>安装和启动方式</h1><p>python版本的playwright在启动浏览器进程的时候是用nodejs版本的进行启动的</p><p><img src="https://raw.githubusercontent.com/lozzo/lozzo.github.io/pic/image-20210326165427809.png" alt="image-20210326165427809"></p><p>在安装的时候setup.py会去下载对应版本的nodejs的版本</p><p><img src="https://raw.githubusercontent.com/lozzo/lozzo.github.io/pic/image-20210326165558183.png" alt="image-20210326165558183"></p><p>启动代码为</p><p><a href="https://github.com/microsoft/playwright-python/blob/03e5cd01fdda2125cea47ab443d34564f767af13/playwright/_impl/_transport.py#L57">https://github.com/microsoft/playwright-python/blob/03e5cd01fdda2125cea47ab443d34564f767af13/playwright/_impl/_transport.py#L57</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Transport</span>:</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-keyword">None</span>:</span><br>        self._loop = asyncio.get_running_loop()<br>        self._stopped_future: asyncio.Future = asyncio.Future()<br><br>        self._proc = proc = <span class="hljs-keyword">await</span> asyncio.create_subprocess_exec(<br>            <span class="hljs-built_in">str</span>(self._driver_executable),<span class="hljs-comment">#self._driver_executable就是 /Users/lozzo/.virtualenvs/py37/lib/python3.7/site-packages/playwright/driver/playwright.sh</span><br>            <span class="hljs-string">&quot;run-driver&quot;</span>,<br>            stdin=asyncio.subprocess.PIPE,<br>            stdout=asyncio.subprocess.PIPE,<br>            stderr=_get_stderr_fileno(),<br>            limit=<span class="hljs-number">32768</span>,<br>        )<br>        <span class="hljs-keyword">assert</span> proc.stdout<br>        <span class="hljs-keyword">assert</span> proc.stdin<br>        self._output = proc.stdin<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self._stopped:<br>            <span class="hljs-keyword">try</span>:<br>                buffer = <span class="hljs-keyword">await</span> proc.stdout.readexactly(<span class="hljs-number">4</span>)<br>                length = <span class="hljs-built_in">int</span>.from_bytes(buffer, byteorder=<span class="hljs-string">&quot;little&quot;</span>, signed=<span class="hljs-literal">False</span>)<br>                buffer = <span class="hljs-built_in">bytes</span>(<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">while</span> length:<br>                    to_read = <span class="hljs-built_in">min</span>(length, <span class="hljs-number">32768</span>)<br>                    data = <span class="hljs-keyword">await</span> proc.stdout.readexactly(to_read)<br>                    length -= to_read<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(buffer):<br>                        buffer = buffer + data<br>                    <span class="hljs-keyword">else</span>:<br>                        buffer = data<br>                obj = json.loads(buffer)<br><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;DEBUGP&quot;</span> <span class="hljs-keyword">in</span> os.environ:  <span class="hljs-comment"># pragma: no cover</span><br>                    print(<span class="hljs-string">&quot;\x1b[33mRECV&gt;\x1b[0m&quot;</span>, json.dumps(obj, indent=<span class="hljs-number">2</span>))<br>                self.on_message(obj)<br>            <span class="hljs-keyword">except</span> asyncio.IncompleteReadError:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">0</span>)<br>        self._stopped_future.set_result(<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p><del>所以要使playwright能够进行远程访问，只需要修改python版本的启动方式，然后后面的远程的nodejs版本更具请求参数进行转换，然后将ws暴露出来，即可进行远程访问</del></p><p><img src="https://raw.githubusercontent.com/lozzo/lozzo.github.io/pic/image-20210329171233140.png" alt="image-20210329171233140"></p><p>python端和nodejs端是通过进程间通信进行通信的，所以我们只需要在python和nodejs外各包一层，然后在让他们外包的一层之间用socket进行通信即可实现远程调用。</p><p><img src="https://raw.githubusercontent.com/lozzo/lozzo.github.io/pic/image-20210329171244665.png" alt="image-20210329171244665"></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="python端代码修改"><a href="#python端代码修改" class="headerlink" title="python端代码修改"></a>python端代码修改</h2><p>修改代码<a href="https://github.com/microsoft/playwright-python/blob/29cddbd5174ab262e5cb57b2d8c8fbcf8df3e171/playwright/_impl/_driver.py#L24">https://github.com/microsoft/playwright-python/blob/29cddbd5174ab262e5cb57b2d8c8fbcf8df3e171/playwright/_impl/_driver.py#L24</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">compute_driver_executable</span>() -&gt; Path:</span><br>    <span class="hljs-keyword">return</span> Path(<span class="hljs-string">&quot;/Users/lozzo/.virtualenvs/py37/lib/python3.7/site-packages/playwright/driver/playwright.sh&quot;</span>)<br>    <span class="hljs-comment"># package_path = Path(inspect.getfile(playwright)).parent</span><br>    <span class="hljs-comment"># platform = sys.platform</span><br>    <span class="hljs-comment"># if platform == &quot;win32&quot;:</span><br>    <span class="hljs-comment">#     return package_path / &quot;driver&quot; / &quot;playwright.cmd&quot;</span><br>    <span class="hljs-comment"># return package_path / &quot;driver&quot; / &quot;playwright.sh&quot;</span><br></code></pre></td></tr></table></figure><p>其中<code>/Users/lozzo/.virtualenvs/py37/lib/python3.7/site-packages/playwright/driver/playwright.sh</code>内容为</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment">#SCRIPT_PATH=&quot;$(cd &quot;$(dirname &quot;$0&quot;)&quot; ; pwd -P)&quot;</span><br><span class="hljs-comment">#$SCRIPT_PATH/node $SCRIPT_PATH/package/lib/cli/cli.js &quot;$@&quot;</span><br><span class="hljs-built_in">cd</span> /Users/lozzo/workdir/sovietironfist/<span class="hljs-built_in">test</span><br>ts-node processPipe.ts<br></code></pre></td></tr></table></figure><p><code>processPipe.ts</code>内容为</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> net <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;net&quot;</span><br>(<span class="hljs-keyword">async</span>()=&gt;&#123;<br>    <span class="hljs-keyword">const</span> socket = <span class="hljs-keyword">new</span> net.Socket()<br>    socket.connect(&#123;<span class="hljs-attr">host</span>:<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-attr">port</span>:<span class="hljs-number">12345</span>&#125;)<br>    process.stdin.pipe(socket)<br>    socket.pipe(process.stdout)<br>&#125;)()<br></code></pre></td></tr></table></figure><p>需要注意的是请不要在这个脚本中使用<code>console.*</code>进行任何标准输入输出操作，这些操作会被本地的playwright-python进行读取，产生异常</p><p>当然也可以修改<a href="!https://github.com/microsoft/playwright-python/blob/03e5cd01fdda2125cea47ab443d34564f767af13/playwright/_impl/_transport.py#L36">playwright/_impl/_transport.py Transport类</a>,使之直接和远端的socket链接，少走一层</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Transport</span>:</span><br>       <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-keyword">None</span>:</span><br>        self._loop = asyncio.get_running_loop()<br>        self._stopped_future: asyncio.Future = asyncio.Future()<br>        <br>        reader, writer = <span class="hljs-keyword">await</span> asyncio.open_connection(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,port=<span class="hljs-number">12345</span>)<br>        self._output = writer<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self._stopped:<br>            <span class="hljs-keyword">try</span>:<br>                buffer = <span class="hljs-keyword">await</span> reader.readexactly(<span class="hljs-number">4</span>)<br>                length = <span class="hljs-built_in">int</span>.from_bytes(buffer, byteorder=<span class="hljs-string">&quot;little&quot;</span>, signed=<span class="hljs-literal">False</span>)<br>                buffer = <span class="hljs-built_in">bytes</span>(<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">while</span> length:<br>                    to_read = <span class="hljs-built_in">min</span>(length, <span class="hljs-number">32768</span>)<br>                    data = <span class="hljs-keyword">await</span> reader.readexactly(to_read)<br>                    length -= to_read<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(buffer):<br>                        buffer = buffer + data<br>                    <span class="hljs-keyword">else</span>:<br>                        buffer = data<br>                obj = json.loads(buffer)<br><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;DEBUGP&quot;</span> <span class="hljs-keyword">in</span> os.environ:  <span class="hljs-comment"># pragma: no cover</span><br>                    print(<span class="hljs-string">&quot;\x1b[33mRECV&gt;\x1b[0m&quot;</span>, json.dumps(obj, indent=<span class="hljs-number">2</span>))<br>                self.on_message(obj)<br>            <span class="hljs-keyword">except</span> asyncio.IncompleteReadError:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">0</span>)<br>        self._stopped_future.set_result(<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><h2 id="node端代码修改"><a href="#node端代码修改" class="headerlink" title="node端代码修改"></a>node端代码修改</h2><p>常驻进程为<code>socketPipe.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> net <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;net&#x27;</span><br><span class="hljs-keyword">import</span> &#123; spawn, ChildProcessWithoutNullStreams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;child_process&#x27;</span><br>;(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">let</span> child: ChildProcessWithoutNullStreams | <span class="hljs-literal">undefined</span><br>    <span class="hljs-keyword">const</span> server = net.createServer()<br>    server.listen(<span class="hljs-number">12345</span>)<br>    <span class="hljs-keyword">const</span> close = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (child) &#123;<br>            child.kill(<span class="hljs-number">0</span>)<br>            child = <span class="hljs-literal">undefined</span><br>        &#125;<br>    &#125;<br>    server.on(<span class="hljs-string">&#x27;connection&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">socket: net.Socket</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;connection&#x27;</span>)<br>        <span class="hljs-keyword">if</span> (!child) &#123;<br>            child = spawn(<span class="hljs-string">&#x27;/Users/lozzo/.virtualenvs/py37/lib/python3.7/site-packages/playwright/driver/b.sh&#x27;</span>)<br>        &#125;<br>        child.on(<span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">number</span>, signal</span>) =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-built_in">number</span>, signal)<br>        &#125;)<br>        child.stdout.pipe(socket)<br>        socket.pipe(child.stdin)<br>        socket.on(<span class="hljs-string">&#x27;error&#x27;</span>, close)<br>    &#125;)<br><br>    server.on(<span class="hljs-string">&#x27;close&#x27;</span>, close)<br>    server.on(<span class="hljs-string">&#x27;error&#x27;</span>, close)<br>&#125;)()<br><br></code></pre></td></tr></table></figure><p>其中<code>/Users/lozzo/.virtualenvs/py37/lib/python3.7/site-packages/playwright/driver/b.sh</code>内容为</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br>SCRIPT_PATH=<span class="hljs-string">&quot;<span class="hljs-subst">$(cd <span class="hljs-string">&quot;<span class="hljs-subst">$(dirname <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>&quot;</span>)</span>&quot;</span> ; pwd -P)</span>&quot;</span><br><span class="hljs-variable">$SCRIPT_PATH</span>/node <span class="hljs-variable">$SCRIPT_PATH</span>/package/lib/cli/cli.js <span class="hljs-string">&#x27;run-driver&#x27;</span><br></code></pre></td></tr></table></figure><p>服务端启动ts-node socketPipe.ts</p><p>然后就可以远程调用了(本地无感使用)，同理，其他的语言的服务是可以一样操作的</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>nodejs</tag>
      
      <tag>chrome</tag>
      
      <tag>playwright</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RKE安装K8S+rancher2.0安装</title>
    <link href="/2021/03/28/RKE%E5%AE%89%E8%A3%85K8S+rancher2.0%E5%AE%89%E8%A3%85/"/>
    <url>/2021/03/28/RKE%E5%AE%89%E8%A3%85K8S+rancher2.0%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>Debian GNU/Linux 10 (buster) 下安装流水帐</p><p>安装docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt search show docekr -a<br></code></pre></td></tr></table></figure><p>选择合适版本docker进行安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs sh">cat &gt; /etc/docker/daemon.json &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="hljs-string">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="hljs-string">  &quot;log-opts&quot;: &#123;</span><br><span class="hljs-string">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;registry-mirrors&quot;: [&quot;https://adw6g9fr.mirror.aliyuncs.com&quot;],</span><br><span class="hljs-string">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="hljs-string">  &quot;storage-opts&quot;: [</span><br><span class="hljs-string">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="hljs-string">  ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br>systemctl restart docker<br>swapoff -a<br>yes | cp /etc/fstab /etc/fstab_bak<br>cat /etc/fstab_bak |grep -v swap &gt; /etc/fstab<br><span class="hljs-comment"># 修改 /etc/sysctl.conf</span><br><span class="hljs-comment"># 如果有配置，则修改</span><br>sed -i <span class="hljs-string">&quot;s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g&quot;</span>  /etc/sysctl.conf<br>sed -i <span class="hljs-string">&quot;s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g&quot;</span>  /etc/sysctl.conf<br>sed -i <span class="hljs-string">&quot;s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g&quot;</span>  /etc/sysctl.conf<br>sed -i <span class="hljs-string">&quot;s#^net.ipv6.conf.all.disable_ipv6.*#net.ipv6.conf.all.disable_ipv6=1#g&quot;</span>  /etc/sysctl.conf<br>sed -i <span class="hljs-string">&quot;s#^net.ipv6.conf.default.disable_ipv6.*#net.ipv6.conf.default.disable_ipv6=1#g&quot;</span>  /etc/sysctl.conf<br>sed -i <span class="hljs-string">&quot;s#^net.ipv6.conf.lo.disable_ipv6.*#net.ipv6.conf.lo.disable_ipv6=1#g&quot;</span>  /etc/sysctl.conf<br>sed -i <span class="hljs-string">&quot;s#^net.ipv6.conf.all.forwarding.*#net.ipv6.conf.all.forwarding=1#g&quot;</span>  /etc/sysctl.conf<br><span class="hljs-comment"># 可能没有，追加</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv4.ip_forward = 1&quot;</span> &gt;&gt; /etc/sysctl.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.bridge.bridge-nf-call-ip6tables = 1&quot;</span> &gt;&gt; /etc/sysctl.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.bridge.bridge-nf-call-iptables = 1&quot;</span> &gt;&gt; /etc/sysctl.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv6.conf.all.disable_ipv6 = 1&quot;</span> &gt;&gt; /etc/sysctl.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv6.conf.default.disable_ipv6 = 1&quot;</span> &gt;&gt; /etc/sysctl.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv6.conf.lo.disable_ipv6 = 1&quot;</span> &gt;&gt; /etc/sysctl.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv6.conf.all.forwarding = 1&quot;</span>  &gt;&gt; /etc/sysctl.conf<br><br><span class="hljs-comment"># 执行命令以应用</span><br>sysctl --system<br><br>systemctl daemon-reload<br><span class="hljs-comment"># 可以选择最新版本</span><br>wget https://github.com/rancher/rke/releases/download/v1.2.4-rc9/rke_linux-amd64<br>mv rke_linux-amd64 /usr/<span class="hljs-built_in">local</span>/bin/rke<br>chmod +x /usr/<span class="hljs-built_in">local</span>/bin/rke<br><span class="hljs-comment"># 生成配置，按照交互式提示进行输入</span><br>rke config --name cluster.yml<br><span class="hljs-comment"># 这一步需要各主机间能够互相访问，可以是在交互式界面内进行调整，或者自己调整过</span><br>rke up --config cluster.yml<br><span class="hljs-comment"># 安装完成后</span><br>scp kube_config_cluster.yml ~/.kube/config<br></code></pre></td></tr></table></figure><p>安装rancher(这一步就可以不再服务器上进行了，只需要<code>~/.kube/config</code> 能够访问的地址就行)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 使用helm进行安装 https://helm.sh/zh/docs/intro/install/</span><br>curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -<br>sudo apt-get install apt-transport-https --yes<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb https://baltocdn.com/helm/stable/debian/ all main&quot;</span> | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list<br>sudo apt-get update<br>sudo apt-get install helm<br><br><span class="hljs-comment"># 添加命名空间</span><br>kubectl create namespace cattle-system<br></code></pre></td></tr></table></figure><p>证书生成脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash -e</span><br><br><span class="hljs-built_in">help</span> ()<br>&#123;<br>    <span class="hljs-built_in">echo</span>  <span class="hljs-string">&#x27; ================================================================ &#x27;</span><br>    <span class="hljs-built_in">echo</span>  <span class="hljs-string">&#x27; --ssl-domain: 生成ssl证书需要的主域名，如不指定则默认为localhost，如果是ip访问服务，则可忽略；&#x27;</span><br>    <span class="hljs-built_in">echo</span>  <span class="hljs-string">&#x27; --ssl-trusted-ip: 一般ssl证书只信任域名的访问请求，有时候需要使用ip去访问server，那么需要给ssl证书添加扩展IP，多个IP用逗号隔开；&#x27;</span><br>    <span class="hljs-built_in">echo</span>  <span class="hljs-string">&#x27; --ssl-trusted-domain: 如果想多个域名访问，则添加扩展域名（SSL_TRUSTED_DOMAIN）,多个扩展域名用逗号隔开；&#x27;</span><br>    <span class="hljs-built_in">echo</span>  <span class="hljs-string">&#x27; --ssl-size: ssl加密位数，默认2048；&#x27;</span><br>    <span class="hljs-built_in">echo</span>  <span class="hljs-string">&#x27; --ssl-date: ssl有效期，默认10年；&#x27;</span><br>    <span class="hljs-built_in">echo</span>  <span class="hljs-string">&#x27; --ca-date: ca有效期，默认10年；&#x27;</span><br>    <span class="hljs-built_in">echo</span>  <span class="hljs-string">&#x27; --ssl-cn: 国家代码(2个字母的代号),默认CN;&#x27;</span><br>    <span class="hljs-built_in">echo</span>  <span class="hljs-string">&#x27; 使用示例:&#x27;</span><br>    <span class="hljs-built_in">echo</span>  <span class="hljs-string">&#x27; ./create_self-signed-cert.sh --ssl-domain=www.test.com --ssl-trusted-domain=www.test2.com \ &#x27;</span><br>    <span class="hljs-built_in">echo</span>  <span class="hljs-string">&#x27; --ssl-trusted-ip=1.1.1.1,2.2.2.2,3.3.3.3 --ssl-size=2048 --ssl-date=3650&#x27;</span><br>    <span class="hljs-built_in">echo</span>  <span class="hljs-string">&#x27; ================================================================&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span><br>    -h|--<span class="hljs-built_in">help</span>) <span class="hljs-built_in">help</span>; <span class="hljs-built_in">exit</span>;;<br><span class="hljs-keyword">esac</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$1</span> == <span class="hljs-string">&#x27;&#x27;</span> ]];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">help</span>;<br>    <span class="hljs-built_in">exit</span>;<br><span class="hljs-keyword">fi</span><br><br>CMDOPTS=<span class="hljs-string">&quot;$*&quot;</span><br><span class="hljs-keyword">for</span> OPTS <span class="hljs-keyword">in</span> <span class="hljs-variable">$CMDOPTS</span>;<br><span class="hljs-keyword">do</span><br>    key=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;OPTS&#125;</span> | awk -F<span class="hljs-string">&quot;=&quot;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> )<br>    value=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;OPTS&#125;</span> | awk -F<span class="hljs-string">&quot;=&quot;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> )<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$key</span>&quot;</span> <span class="hljs-keyword">in</span><br>        --ssl-domain) SSL_DOMAIN=<span class="hljs-variable">$value</span> ;;<br>        --ssl-trusted-ip) SSL_TRUSTED_IP=<span class="hljs-variable">$value</span> ;;<br>        --ssl-trusted-domain) SSL_TRUSTED_DOMAIN=<span class="hljs-variable">$value</span> ;;<br>        --ssl-size) SSL_SIZE=<span class="hljs-variable">$value</span> ;;<br>        --ssl-date) SSL_DATE=<span class="hljs-variable">$value</span> ;;<br>        --ca-date) CA_DATE=<span class="hljs-variable">$value</span> ;;<br>        --ssl-cn) CN=<span class="hljs-variable">$value</span> ;;<br>    <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment">#CA相关配置</span><br>CA_DATE=<span class="hljs-variable">$&#123;CA_DATE:-3650&#125;</span><br>CA_KEY=<span class="hljs-variable">$&#123;CA_KEY:-cakey.pem&#125;</span><br>CA_CERT=<span class="hljs-variable">$&#123;CA_CERT:-cacerts.pem&#125;</span><br>CA_DOMAIN=localhost<br><br><span class="hljs-comment">#ssl相关配置</span><br>SSL_CONFIG=<span class="hljs-variable">$&#123;SSL_CONFIG:-<span class="hljs-variable">$PWD</span>/openssl.cnf&#125;</span><br>SSL_DOMAIN=<span class="hljs-variable">$&#123;SSL_DOMAIN:-localhost&#125;</span><br>SSL_DATE=<span class="hljs-variable">$&#123;SSL_DATE:-3650&#125;</span><br>SSL_SIZE=<span class="hljs-variable">$&#123;SSL_SIZE:-2048&#125;</span><br><br><span class="hljs-comment">##国家代码(2个字母的代号),默认CN;</span><br>CN=<span class="hljs-variable">$&#123;CN:-CN&#125;</span><br><br>SSL_KEY=<span class="hljs-variable">$SSL_DOMAIN</span>.key<br>SSL_CSR=<span class="hljs-variable">$SSL_DOMAIN</span>.csr<br>SSL_CERT=<span class="hljs-variable">$SSL_DOMAIN</span>.crt<br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m ---------------------------- \033[0m&quot;</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m       | 生成 SSL Cert |       \033[0m&quot;</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m ---------------------------- \033[0m&quot;</span><br><br><span class="hljs-keyword">if</span> [[ -e ./<span class="hljs-variable">$&#123;CA_KEY&#125;</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m ====&gt; 1. 发现已存在CA私钥，备份&quot;</span><span class="hljs-variable">$&#123;CA_KEY&#125;</span><span class="hljs-string">&quot;为&quot;</span><span class="hljs-variable">$&#123;CA_KEY&#125;</span><span class="hljs-string">&quot;-bak，然后重新创建 \033[0m&quot;</span><br>    mv <span class="hljs-variable">$&#123;CA_KEY&#125;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CA_KEY&#125;</span>&quot;</span>-bak<br>    openssl genrsa -out <span class="hljs-variable">$&#123;CA_KEY&#125;</span> <span class="hljs-variable">$&#123;SSL_SIZE&#125;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m ====&gt; 1. 生成新的CA私钥 <span class="hljs-variable">$&#123;CA_KEY&#125;</span> \033[0m&quot;</span><br>    openssl genrsa -out <span class="hljs-variable">$&#123;CA_KEY&#125;</span> <span class="hljs-variable">$&#123;SSL_SIZE&#125;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [[ -e ./<span class="hljs-variable">$&#123;CA_CERT&#125;</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m ====&gt; 2. 发现已存在CA证书，先备份&quot;</span><span class="hljs-variable">$&#123;CA_CERT&#125;</span><span class="hljs-string">&quot;为&quot;</span><span class="hljs-variable">$&#123;CA_CERT&#125;</span><span class="hljs-string">&quot;-bak，然后重新创建 \033[0m&quot;</span><br>    mv <span class="hljs-variable">$&#123;CA_CERT&#125;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CA_CERT&#125;</span>&quot;</span>-bak<br>    openssl req -x509 -sha256 -new -nodes -key <span class="hljs-variable">$&#123;CA_KEY&#125;</span> -days <span class="hljs-variable">$&#123;CA_DATE&#125;</span> -out <span class="hljs-variable">$&#123;CA_CERT&#125;</span> -subj <span class="hljs-string">&quot;/C=<span class="hljs-variable">$&#123;CN&#125;</span>/CN=<span class="hljs-variable">$&#123;CA_DOMAIN&#125;</span>&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m ====&gt; 2. 生成新的CA证书 <span class="hljs-variable">$&#123;CA_CERT&#125;</span> \033[0m&quot;</span><br>    openssl req -x509 -sha256 -new -nodes -key <span class="hljs-variable">$&#123;CA_KEY&#125;</span> -days <span class="hljs-variable">$&#123;CA_DATE&#125;</span> -out <span class="hljs-variable">$&#123;CA_CERT&#125;</span> -subj <span class="hljs-string">&quot;/C=<span class="hljs-variable">$&#123;CN&#125;</span>/CN=<span class="hljs-variable">$&#123;CA_DOMAIN&#125;</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m ====&gt; 3. 生成Openssl配置文件 <span class="hljs-variable">$&#123;SSL_CONFIG&#125;</span> \033[0m&quot;</span><br>cat &gt; <span class="hljs-variable">$&#123;SSL_CONFIG&#125;</span> &lt;&lt;<span class="hljs-string">EOM</span><br><span class="hljs-string">[req]</span><br><span class="hljs-string">req_extensions = v3_req</span><br><span class="hljs-string">distinguished_name = req_distinguished_name</span><br><span class="hljs-string">[req_distinguished_name]</span><br><span class="hljs-string">[ v3_req ]</span><br><span class="hljs-string">basicConstraints = CA:FALSE</span><br><span class="hljs-string">keyUsage = nonRepudiation, digitalSignature, keyEncipherment</span><br><span class="hljs-string">extendedKeyUsage = clientAuth, serverAuth</span><br><span class="hljs-string">EOM</span><br><br><span class="hljs-keyword">if</span> [[ -n <span class="hljs-variable">$&#123;SSL_TRUSTED_IP&#125;</span> || -n <span class="hljs-variable">$&#123;SSL_TRUSTED_DOMAIN&#125;</span> ]]; <span class="hljs-keyword">then</span><br>    cat &gt;&gt; <span class="hljs-variable">$&#123;SSL_CONFIG&#125;</span> &lt;&lt;<span class="hljs-string">EOM</span><br><span class="hljs-string">subjectAltName = @alt_names</span><br><span class="hljs-string">[alt_names]</span><br><span class="hljs-string">EOM</span><br>    IFS=<span class="hljs-string">&quot;,&quot;</span><br>    dns=(<span class="hljs-variable">$&#123;SSL_TRUSTED_DOMAIN&#125;</span>)<br>    dns+=(<span class="hljs-variable">$&#123;SSL_DOMAIN&#125;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;!dns[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>      <span class="hljs-built_in">echo</span> DNS.$((i+<span class="hljs-number">1</span>)) = <span class="hljs-variable">$&#123;dns[$i]&#125;</span> &gt;&gt; <span class="hljs-variable">$&#123;SSL_CONFIG&#125;</span><br>    <span class="hljs-keyword">done</span><br><br>    <span class="hljs-keyword">if</span> [[ -n <span class="hljs-variable">$&#123;SSL_TRUSTED_IP&#125;</span> ]]; <span class="hljs-keyword">then</span><br>        ip=(<span class="hljs-variable">$&#123;SSL_TRUSTED_IP&#125;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;!ip[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>          <span class="hljs-built_in">echo</span> IP.$((i+<span class="hljs-number">1</span>)) = <span class="hljs-variable">$&#123;ip[$i]&#125;</span> &gt;&gt; <span class="hljs-variable">$&#123;SSL_CONFIG&#125;</span><br>        <span class="hljs-keyword">done</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m ====&gt; 4. 生成服务SSL KEY <span class="hljs-variable">$&#123;SSL_KEY&#125;</span> \033[0m&quot;</span><br>openssl genrsa -out <span class="hljs-variable">$&#123;SSL_KEY&#125;</span> <span class="hljs-variable">$&#123;SSL_SIZE&#125;</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m ====&gt; 5. 生成服务SSL CSR <span class="hljs-variable">$&#123;SSL_CSR&#125;</span> \033[0m&quot;</span><br>openssl req -sha256 -new -key <span class="hljs-variable">$&#123;SSL_KEY&#125;</span> -out <span class="hljs-variable">$&#123;SSL_CSR&#125;</span> -subj <span class="hljs-string">&quot;/C=<span class="hljs-variable">$&#123;CN&#125;</span>/CN=<span class="hljs-variable">$&#123;SSL_DOMAIN&#125;</span>&quot;</span> -config <span class="hljs-variable">$&#123;SSL_CONFIG&#125;</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m ====&gt; 6. 生成服务SSL CERT <span class="hljs-variable">$&#123;SSL_CERT&#125;</span> \033[0m&quot;</span><br>openssl x509 -sha256 -req -<span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;SSL_CSR&#125;</span> -CA <span class="hljs-variable">$&#123;CA_CERT&#125;</span> \<br>    -CAkey <span class="hljs-variable">$&#123;CA_KEY&#125;</span> -CAcreateserial -out <span class="hljs-variable">$&#123;SSL_CERT&#125;</span> \<br>    -days <span class="hljs-variable">$&#123;SSL_DATE&#125;</span> -extensions v3_req \<br>    -extfile <span class="hljs-variable">$&#123;SSL_CONFIG&#125;</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m ====&gt; 7. 证书制作完成 \033[0m&quot;</span><br><span class="hljs-built_in">echo</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m ====&gt; 8. 以YAML格式输出结果 \033[0m&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;----------------------------------------------------------&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ca_key: |&quot;</span><br>cat <span class="hljs-variable">$CA_KEY</span> | sed <span class="hljs-string">&#x27;s/^/  /&#x27;</span><br><span class="hljs-built_in">echo</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ca_cert: |&quot;</span><br>cat <span class="hljs-variable">$CA_CERT</span> | sed <span class="hljs-string">&#x27;s/^/  /&#x27;</span><br><span class="hljs-built_in">echo</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ssl_key: |&quot;</span><br>cat <span class="hljs-variable">$SSL_KEY</span> | sed <span class="hljs-string">&#x27;s/^/  /&#x27;</span><br><span class="hljs-built_in">echo</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ssl_csr: |&quot;</span><br>cat <span class="hljs-variable">$SSL_CSR</span> | sed <span class="hljs-string">&#x27;s/^/  /&#x27;</span><br><span class="hljs-built_in">echo</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ssl_cert: |&quot;</span><br>cat <span class="hljs-variable">$SSL_CERT</span> | sed <span class="hljs-string">&#x27;s/^/  /&#x27;</span><br><span class="hljs-built_in">echo</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m ====&gt; 9. 附加CA证书到Cert文件 \033[0m&quot;</span><br>cat <span class="hljs-variable">$&#123;CA_CERT&#125;</span> &gt;&gt; <span class="hljs-variable">$&#123;SSL_CERT&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ssl_cert: |&quot;</span><br>cat <span class="hljs-variable">$SSL_CERT</span> | sed <span class="hljs-string">&#x27;s/^/  /&#x27;</span><br><span class="hljs-built_in">echo</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m ====&gt; 10. 重命名服务证书 \033[0m&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;cp <span class="hljs-variable">$&#123;SSL_DOMAIN&#125;</span>.key tls.key&quot;</span><br>cp <span class="hljs-variable">$&#123;SSL_DOMAIN&#125;</span>.key tls.key<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;cp <span class="hljs-variable">$&#123;SSL_DOMAIN&#125;</span>.crt tls.crt&quot;</span><br>cp <span class="hljs-variable">$&#123;SSL_DOMAIN&#125;</span>.crt tls.crt<br></code></pre></td></tr></table></figure><p>上述证书生成脚本我们命名为<code>cert.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 生成证书</span><br>./cert.sh --ssl-domain=rancher.testchrome.net --ssl-size=2048 --ssl-date=3650<br>ls -lrt<br>-rwxr-xr-x 1 root root      5306 Mar 26 06:30 cert.sh<br>-rw------- 1 root root      1675 Mar 26 06:30 cakey.pem<br>-rw-r--r-- 1 root root      1147 Mar 26 06:30 cacerts.pem<br>-rw-r--r-- 1 root root       241 Mar 26 06:30 openssl.cnf<br>-rw------- 1 root root      1679 Mar 26 06:30 rancher.testchrome.net.key<br>-rw-r--r-- 1 root root      1025 Mar 26 06:30 rancher.testchrome.net.csr<br>-rw-r--r-- 1 root root        41 Mar 26 06:30 cacerts.srl<br>-rw-r--r-- 1 root root      2278 Mar 26 06:30 rancher.testchrome.net.crt<br>-rw------- 1 root root      1679 Mar 26 06:30 tls.key<br>-rw-r--r-- 1 root root      2278 Mar 26 06:30 tls.crt<br><span class="hljs-comment"># ！！！！添加secret前要注意切换到cattle-system命名空间，否着rancher安装后会一致处于ContainerCreating</span><br>kubectl config set-context --current --namespace=cattle-system<br><br><span class="hljs-comment"># 服务证书，这个证书名称和rancher创建出来的cattle的deploy里面的证书名称需要一致</span><br>kubectl create secret tls tls-rancher-ingress --cert=tls.crt  --key=tls.key<br><span class="hljs-comment"># 私钥证书</span><br>kubectl create secret generic tls-ca --from-file=cacerts.pem<br><br><span class="hljs-comment"># 添加仓库</span><br>helm repo add rancher-stable https://releases.rancher.com/server-charts/stable<br>helm update<br><span class="hljs-comment"># 安装rancher</span><br>helm install rancher rancher-stable/rancher \<br>--namespace cattle-system \<br>--<span class="hljs-built_in">set</span> hostname=rancher.testchrome.net \<br>--<span class="hljs-built_in">set</span> ingress.tls.source=secret \<br>--<span class="hljs-built_in">set</span> privateCA=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>当所有节点onReady的时候，就可以访问<a href="https://rancher.testchrome.net/">https://rancher.testchrome.net</a> 进行后续配置了</p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>linux</tag>
      
      <tag>rancher</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从hashMap到bloom过滤器</title>
    <link href="/2019/10/18/%E4%BB%8EhashMap%E5%88%B0bloom%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/2019/10/18/%E4%BB%8EhashMap%E5%88%B0bloom%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="hashTable"><a href="#hashTable" class="headerlink" title="hashTable"></a>hashTable</h2><p>哈希表又叫散列表是一种键值对存储结构的一种数据结构，python的字典就采用这种数据结构，其效率在理想状态下是O(1)，但是在最差的情况下是O(n)，这儿我们按照思路自己实现一个，其基本实现过程为</p><ol><li>申请一个定长m的列表作为存储空间，在每个位置上设置值为None，列表根据索引取值/设置的时间复杂度是O(1)</li><li>列表上每个位置在有值的情况下，其数据结构为一个<code>[key,value]</code>的列表</li><li>对设置的<code>key</code>进行hash求值后得到值p，再对p和m求模的到值n，这个值n就是该键值对存储在列表中的位置</li><li>当被作为存储的列表的空间被占用到一定比例的时候进行扩容</li></ol><p><img src="https://raw.githubusercontent.com/lozzo/lozzo.github.io/pic/image-20201019221758736.png" alt="图一">例如设置<code>k-v为</code> <code>&#39;张三&#39;</code>对应<code>&#39;爱吃包子&#39;</code>,对<code>张三</code>求hash之后再与列表长度16进行求模,得到值2，即<code>&#39;张三&#39;</code>对应<code>&#39;爱吃包子&#39;</code>这个键值对就应该存储的list的2这个index位置上。取值时，进行同样的操作即可。</p><p>但是当然上述情况可能会出现哈希冲突，即不同的<code>key</code>最后得到的n值是一样的，好巧不巧，罗老师爱馒头，而<code>罗老师</code>这个key算出在列表中的位置也是2，这可怎么办呢？</p><p><img src="https://raw.githubusercontent.com/lozzo/lozzo.github.io/pic/image-20201019221738430.png" alt="图二">这种情况下，可以通过<code>开放寻值法</code>或者<code>链接法</code>来进行冲突解决。</p><h3 id="开放寻值"><a href="#开放寻值" class="headerlink" title="开放寻值"></a>开放寻值</h3><p>开放寻值是指当<code>张三</code>占据了2号位的时候，<code>罗老师</code>也想进到2号位来，这个时候后来的<code>罗老师</code>只能屈居后位来，在2号位之后找一个位置填进去，至于怎么找后一位，有线性探测、二次探测、双重散列等方式。这儿我们使用最简单的线性探测。</p><p><img src="https://raw.githubusercontent.com/lozzo/lozzo.github.io/pic/image-20201019221714623.png" alt="图三"></p><p>在查找<code>罗老师</code>的时候，先通过<code>hash(&#39;罗老师&#39;)%16=2</code>求出罗老师在2号位，如果2号位存的值的key不是<code>罗老师</code>，那我们就去找3号位，如果3号位也不是<code>罗老师</code>，那我们就找4号位，以此类推直到找到<code>罗老师</code>，值得注意得是，在删除一个key时，同时也要将被删除值的右边的所有元素直到第一个None值重新散列。</p><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashTable</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    _reload_factor = <span class="hljs-number">0.75</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, size</span>):</span><br>        self.size = size<br>        self.used_index = <span class="hljs-number">0</span><br>        self._container = [<span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size)]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_get_index</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span>(key) % self.size<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_loop_index</span>(<span class="hljs-params">self, index</span>):</span><br>        <span class="hljs-comment"># 循环的时候不重新填到之前的位置</span><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.size - <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> index &gt; self.size - <span class="hljs-number">1</span>:<br>                index = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">yield</span> index<br>            index += <span class="hljs-number">1</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> self._loop_index(self._get_index(key)):<br>            data = self._container[index]<br>            <span class="hljs-keyword">if</span> data <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">if</span> data[<span class="hljs-number">0</span>] == key:<br>                    <span class="hljs-keyword">return</span> data[<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set</span>(<span class="hljs-params">self, key, value</span>):</span><br>        <span class="hljs-comment"># 计算是否需要扩容</span><br>        <span class="hljs-keyword">if</span> self.used_index / self.size &gt; self._reload_factor:<br>            self._reload()<br><br>        <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> self._loop_index(self._get_index(key)):<br>            data = self._container[index]<br>            <span class="hljs-keyword">if</span> data <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                self._container[index] = [key, value]<br>                self.used_index += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">if</span> data[<span class="hljs-number">0</span>] == key:<br>                self._container[index] = [key, value]<br>                <span class="hljs-keyword">return</span><br><br>    <span class="hljs-comment"># 重新申请长度的时候这儿我们设置为之前的两倍</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_reload</span>(<span class="hljs-params">self</span>):</span><br>        old_container = self._container<br>        self.size *= <span class="hljs-number">2</span><br>        self._container = [<span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.size)]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> old_container:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                self.<span class="hljs-built_in">set</span>(i[<span class="hljs-number">0</span>], i[<span class="hljs-number">1</span>])<br>                self.used_index -=<span class="hljs-number">1</span><br><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">self, key</span>):</span><br>        del_index = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> self._loop_index(self._get_index(key)):<br>            data = self._container[index]<br>            <span class="hljs-keyword">if</span> data <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> data[<span class="hljs-number">0</span>] == key:<br>                self._container[index] = <span class="hljs-literal">None</span><br>                self.used_index -= <span class="hljs-number">1</span><br>                del_index = index<br>                <span class="hljs-keyword">break</span><br><br>        <span class="hljs-comment"># 将删除位置到其右边下一个空位之间所有的元素重新散列</span><br>        <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> self._loop_index(del_index+<span class="hljs-number">1</span>):<br>            data = self._container[index]<br>            <span class="hljs-keyword">if</span> data <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">break</span><br>            self._container[index] = <span class="hljs-literal">None</span><br>            self.<span class="hljs-built_in">set</span>(*data)<br>            self.used_index -=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="链接法"><a href="#链接法" class="headerlink" title="链接法"></a>链接法</h3><p>链接法是指，当<code>张三</code>占据了2号位的时候，<code>罗老师</code>也想进到2号位来，那么这个时候我们二号位上的数据结构改变成<code>[key,value]</code>为元素的一个链表，把<code>[&quot;罗老师&quot;,&quot;爱吃馒头&quot;]</code>作为链表上的节点的元素的节点添加到<code>[&quot;张三&quot;,&quot;爱吃包子&quot;]</code>作为元素的链表的节点的后面</p><p><img src="https://raw.githubusercontent.com/lozzo/lozzo.github.io/pic/image-20201019221647907.png" alt="图四"></p><p>当需要找到<code>罗老师</code>的时候，根据<code>hash(&#39;罗老师&#39;)%16=2</code>求出罗老师在2号位， 然后遍历2号位上的链表，直到找到<code>罗老师</code>,当然同样存在扩容的问题，应为如果一个index上的链表过长也会导致查询时间变慢，极端情况下会出现O(n)的查询效率</p><p>下面是代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 一个简单的链表实现,只写了添加和删除</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedNode</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,data</span>):</span><br>        self.data = data<br>        self.next_node = <span class="hljs-literal">None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Linked</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,first_data</span>):</span><br>        first_node = LinkedNode(first_data)<br>        self.first_node = first_node<br>        self.last_node = first_node<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">append</span>(<span class="hljs-params">self,data</span>):</span><br>        node = LinkedNode(data)<br>        <span class="hljs-keyword">if</span> self.first_node == <span class="hljs-literal">None</span>:<br>            self.first_node = node<br>            self.last_node = node<br>            <span class="hljs-keyword">return</span><br>        self.last_node.next_node = node<br>        self.last_node = node<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_node</span>(<span class="hljs-params">self,node</span>):</span><br>        <span class="hljs-keyword">if</span> node == self.first_node:<br>            <span class="hljs-keyword">if</span> self.first_node == self.last_node:<br>                self.first_node = <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">else</span>:<br>                self.first_node = self.first_node.next_node<br>            <span class="hljs-keyword">return</span><br><br>        p = self.first_node<br>        pp = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> p.next_node:<br>            pp ,p = p, p.next_node<br>            <span class="hljs-keyword">if</span> p == node:<br>                pp.next_node = p.next_node<br>                <span class="hljs-keyword">return</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">for_each</span>(<span class="hljs-params">self</span>):</span><br>        p = self.first_node<br>        <span class="hljs-keyword">while</span> p.next_node:<br>            <span class="hljs-keyword">yield</span> p<br>            p = p.next_node<br>        <span class="hljs-keyword">yield</span> p<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashTable</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,size</span>):</span><br>        self.size = size<br>        self._container = [<span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size)]<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_get_index</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span>(key) % self.size<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set</span>(<span class="hljs-params">self,key,value</span>):</span><br>        index = self._get_index(key)<br>        linked = self._container[index]<br><br>        <span class="hljs-keyword">if</span> linked <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            self._container[index] = Linked([key,value])<br>            <span class="hljs-keyword">return</span><br>        <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> linked.for_each():<br>            <span class="hljs-keyword">if</span> i.data[<span class="hljs-number">0</span>] == key:<br>                i.data[<span class="hljs-number">1</span>] = value<br>                <span class="hljs-keyword">return</span><br>        linked.append([key,value])<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self,key</span>):</span><br>        index = self._get_index(key)<br>        linked = self._container[index]<br><br>        <span class="hljs-keyword">if</span> linked <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> linked.for_each():<br>            <span class="hljs-keyword">if</span> i.data[<span class="hljs-number">0</span>] == key:<br>                <span class="hljs-keyword">return</span> i.data[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">self,key</span>):</span><br>        index = self._get_index(key)<br>        linked = self._container[index]<br><br>        <span class="hljs-keyword">if</span> linked <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        <br>        <span class="hljs-keyword">if</span> linked.first_node == <span class="hljs-literal">None</span>:<br>            self._container[index] = <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> linked.for_each():<br>            <span class="hljs-keyword">if</span> i.data[<span class="hljs-number">0</span>] == key:<br>                linked.delete_node(i)<br></code></pre></td></tr></table></figure><h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>当我们在写python代码时，如果遇到需要去重的时候，我们大家第一反应是使用set，其实set的实现和map相似，都是hash表，但是如果要进行海量数据进行去重时，比如采集系统的url去重可能上亿或者更多的url需要去重，set就需要占用大量的内存空间，如果采用链表或者树，那么时间复杂度又上去了。这时布隆过滤器就登场了。</p><p><strong>布隆过滤器</strong>（英语：Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p><p><img src="https://raw.githubusercontent.com/lozzo/lozzo.github.io/pic/image-20201019224047585.png" alt="图五"></p><ol><li>如 <strong>图五</strong>，当我们插入<code>&#39;张三&#39;</code>时分别通过三个hash函数和bitmap（不再是list了，虽然list也可以，但是bitmap更加合适，更节省空间）的长度进行求模（就如同上面hashTable一样）求的分别的index，然后将这些index位上的bit设置为1（无论之前的状态是0是1）</li><li>如 <strong>图五</strong>，当查询<code>&#39;罗老师&#39;</code>的时候，一样通过这三个hash函数求得分别的index，然后去取对应的bit的状态，如果都是1则<code>&#39;罗老师&#39;</code>是存在的，如果有任何一位不是0，就如图所示，<code>hash2</code>函数得到的index 15 是0，则说明<code>&#39;罗老师&#39;</code>之前没有被设置过</li><li>如<strong>图六</strong>，上述情况如果<code>&#39;罗老师&#39;</code>并没有被插入过，但是好巧不巧<code>&#39;李四&#39;</code>把15号位设置成了1，那么当我们查询<code>&#39;罗老师&#39;</code>在不在的时候就有可能出现误判，究其原因还是因为hash碰撞导致的。这也就是上面所说的存在误判的原因<img src="https://raw.githubusercontent.com/lozzo/lozzo.github.io/pic/image-20201020095025034.png" alt="图六"></li><li>不能删除的原因是因为一个bit位可能被多个<code>key</code>置为1过，如果将此位重置成0，那么将影响到多个key的查询。这就是上面所讲的删除困难的所在。</li></ol><h3 id="布隆过滤器参数的确定"><a href="#布隆过滤器参数的确定" class="headerlink" title="布隆过滤器参数的确定"></a>布隆过滤器参数的确定</h3><p>如果布隆过滤器的长度太小，所有的 bit 位很快就会被用完，此时任何查询都会返回“可能存在”；如果布隆过滤器的长度太大，那么误判的概率会很小，但是内存空间浪费严重。类似的，哈希函数的个数越多，则布隆过滤器的 bit 位被占用的速度越快；哈希函数的个数越少，则误判的概率又会上升。因此，布隆过滤器的长度和哈希函数的个数需要根据业务场景来权衡。</p><p>我们假设 k 为哈希函数的个数，m 为布隆过滤器的长度，n 为插入元素的个数（需要处理的数据个数），p 为误报率，则：<br>$$<br>m=\frac {-n\ln p}{(\ln2)^2}<br>$$<br>$$<br>k=\ln2\frac {m}{n}<br>$$<br>代码实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># https://github.com/ilanschnell/bitarray</span><br><span class="hljs-keyword">from</span> bitarray <span class="hljs-keyword">import</span> bitarray<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> hashlib<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BloomFilter</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,</span></span><br><span class="hljs-function"><span class="hljs-params">                 item_size,</span></span><br><span class="hljs-function"><span class="hljs-params">                 misdeclaration_rate=<span class="hljs-number">0.001</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                 hash_random_code=<span class="hljs-string">&quot;Jsk&quot;</span></span>):</span><br>        self.item_size = item_size<br>        self.misdeclaration_rate = misdeclaration_rate <span class="hljs-keyword">if</span> misdeclaration_rate &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> misdeclaration_rate &lt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0.001</span><br>        self.hash_random_code = hash_random_code<br>        self._init_bits()<br>        self._init_hash_func()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_init_bits</span>(<span class="hljs-params">self</span>):</span><br>        size = <span class="hljs-built_in">int</span>(-self.item_size * math.log(self.misdeclaration_rate) /<br>                   (math.log(<span class="hljs-number">2</span>) * math.log(<span class="hljs-number">2</span>)))<br>        print(<span class="hljs-string">f&quot;bit size <span class="hljs-subst">&#123;size&#125;</span>&quot;</span>)<br>        print(<span class="hljs-string">f&quot;it cost <span class="hljs-subst">&#123;<span class="hljs-built_in">round</span>(size/<span class="hljs-number">8</span>/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>,<span class="hljs-number">3</span>)&#125;</span>M&quot;</span>)<br>        self.bits_size = size<br>        self.bitmap = self.bits_size * bitarray(<span class="hljs-string">&quot;0&quot;</span>)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_md5</span>(<span class="hljs-params">key</span>):</span><br>        h = hashlib.md5()<br>        h.update(key.encode())<br>        <span class="hljs-keyword">return</span> h.hexdigest()<br>   <br>    <span class="hljs-comment"># 这儿是使用的md5做的hash，当然如果是实际生产中，可以选取更高效的hash函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_init_hash_func</span>(<span class="hljs-params">self</span>):</span><br>        size = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>,<br>                       <span class="hljs-built_in">round</span>(self.bits_size / self.item_size * math.log(<span class="hljs-number">2</span>))))<br>        print(<span class="hljs-string">f&quot;func size <span class="hljs-subst">&#123;size&#125;</span>&quot;</span>)<br>        self.hash_funcs = [<br>            <span class="hljs-keyword">lambda</span> x: BloomFilter.get_md5(x + i * self.hash_random_code)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size)<br>        ]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_get_index</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-keyword">return</span> [<span class="hljs-built_in">int</span>(x(key), base=<span class="hljs-number">16</span>) % self.bits_size <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> self.hash_funcs]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set</span>(<span class="hljs-params">self, key</span>):</span><br>        index = self._get_index(key)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> index:<br>            self.bitmap[i] = <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span>(<span class="hljs-params">self, key</span>):</span><br>        index = self._get_index(key)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> index:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.bitmap[i]:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    a = BloomFilter(<span class="hljs-number">100000000</span>)<br>    a.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;ksu&quot;</span>)<br>    print(a.check(<span class="hljs-string">&quot;ksu&quot;</span>))<br>    print(a.check(<span class="hljs-string">&quot;ksp&quot;</span>))<br></code></pre></td></tr></table></figure><p>执行上面的脚本输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">bit size 1437758756<br>it cost 171.394M<br>hash func size 10<br>True<br>False<br></code></pre></td></tr></table></figure><p>1亿个元素的去重，误报率在0.1%，只需要170M的空间就能进行，在实际的生产中，大多数情况下的会使用redis作为布隆过滤器的存储，redis的<code>string</code>类型有<code>SETBIT</code>和<code>GETBIT</code>命令，相关实现网上也有很多例子。</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
